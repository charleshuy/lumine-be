@model Application.DTOs.UserDTO.ResponseUserDTO
@using Application.DTOs.ServiceDTO
@using Application.Paggings
@using Application.DTOs
@using Domain.Entities
@{
    ViewData["Title"] = "My Profile";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@await Html.PartialAsync("_UserSidebar")

<form asp-action="Update" method="post" id="profileForm">
    <div class="container mt-5 profile-container position-relative">
        <div class="star-icon">★</div>
        <div class="profile-header">XIN CHÀO <span>“@Model.FirstName @Model.LastName”</span></div>
        @* <p class="profile-subtext">Profile của bạn có thể cập nhật lúc nào cũng được nhé</p> *@

        <div class="row mt-4">
            <div class="col-md-4">
                <div class="profile-img-container">
                    <img id="avatarPreview"
                    src="@(string.IsNullOrEmpty(Model.ProfilePicture) ? Url.Content("~/img/default-avatar.png") : Model.ProfilePicture)"
                    alt="Profile Picture"
                    class="img-fluid rounded" />
                </div>

                <input type="file" id="avatarInput" accept="image/*" class="form-control mt-2" hidden />
                <button type="button" class="btn btn-sm btn-light-pink w-100 mb-3" id="changeAvatarBtn">
                    <i class="bi bi-pencil-fill"></i> Thay đổi ảnh
                </button>
            </div>


            <div class="col-md-8">

                <!-- Nav bar -->
                <ul class="nav nav-pills nav-custom mb-4" id="profileTabs">
                    <li class="nav-item">
                        <a class="nav-link active" href="#" data-tab="info">Thông tin tài khoản</a>
                    </li>

                    @if (Model.Roles.Any(r => r.Name == "User"))
                    {
                        <li class="nav-item">
                            <a class="nav-link" href="#" data-tab="customer-bookings">Lịch sử đặt lịch</a>
                        </li>
                    }

                    @if (Model.Roles.Any(r => r.Name == "Artist"))
                    {
                        <li class="nav-item">
                            <a class="nav-link" href="#" data-tab="artist-bookings">Lịch hẹn của tôi</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#" data-tab="services">Quản lý dịch vụ</a>
                        </li>
                    }

                    <li class="nav-item">
                        <a class="nav-link" href="#">Đổi mật khẩu</a>
                    </li>
                </ul>

                <!-- Info Section -->
                <div id="info-section">
                    <div class="row mb-3">
                        <div class="col-sm-6">
                            <label class="info-label">Họ và tên:</label>
                            <div class="info-value view-mode">@Model.FirstName @Model.LastName</div>
                            <input type="text" name="FirstName" class="form-control edit-mode d-none" value="@Model.FirstName" />
                            <input type="text" name="LastName" class="form-control edit-mode d-none mt-1" value="@Model.LastName" />
                        </div>
                        <div class="col-sm-6">
                            <label class="info-label">Tên người dùng:</label>
                            <div class="info-value">@Model.UserName</div>
                        </div>
                        <div class="col-sm-6 mt-3">
                            <label class="info-label">Email:</label>
                            <div class="info-value view-mode">@Model.Email</div>
                            <input type="email" class="form-control edit-mode d-none" value="@Model.Email" disabled />
                        </div>
                        <div class="col-sm-6 mt-3">
                            <label class="info-label">Địa chỉ:</label>
                            <div class="info-value view-mode">@Model.Address</div>
                            <input type="text" name="Address" class="form-control edit-mode d-none" value="@Model.Address" />
                        </div>
                        <div class="col-sm-6 mt-3">
                            <label class="info-label">Số điện thoại:</label>
                            <div class="info-value view-mode">@Model.PhoneNumber</div>
                            <input type="text" name="PhoneNumber" class="form-control edit-mode d-none" value="@Model.PhoneNumber" />
                        </div>
                        <div class="col-sm-6 mt-3">
                            <label class="info-label">Mô tả:</label>

                            <!-- View mode -->
                            <div class="info-value view-mode description-text">@Model.Description</div>

                            <!-- Edit mode -->
                            <textarea name="Description" class="form-control edit-mode d-none" rows="4">@Model.Description</textarea>
                        </div>




                        <div class="col-sm-6 mt-3">
                            <label class="info-label">Ngày tạo:</label>
                            <div class="info-value">@Model.CreatedAt.ToString("dd/MM/yyyy")</div>
                        </div>
                        <div class="col-sm-6 mt-3">
                            <label class="info-label">Quyền:</label>
                            <div class="info-value">
                                @(Model.Roles != null && Model.Roles.Any() ? string.Join(", ", Model.Roles.Select(r => r.Name)) : "Không có quyền")
                            </div>
                        </div>
                    </div>
                    <div class="d-flex gap-2 mt-4">
                        <button type="button" class="btn btn-black" id="toggleEdit">Thay thông tin</button>
                        <a href="#" class="btn btn-light-pink">Liên hệ</a>
                    </div>
                </div>

                <!-- Customer Bookings Section -->
                <div id="customer-bookings-section" class="d-none mt-4">
                    @if (ViewBag.CustomerBookings != null && ((PaginatedList<BookingDTO>)ViewBag.CustomerBookings).Items.Any())
                    {
                        var bookings = (PaginatedList<BookingDTO>)ViewBag.CustomerBookings;
                        <table class="table table-bordered table-striped">
                            <thead>
                                <tr>
                                    <th>Ngày đặt</th>
                                    <th>Thời gian</th>
                                    <th>Trạng thái</th>
                                    <th>Thợ làm</th>
                                    <th>Dịch vụ</th>
                                    <th>Tổng tiền</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var booking in bookings.Items)
                                {
                                    <tr>
                                        <td>@booking.BookingDate.ToString("dd/MM/yyyy")</td>
                                        <td>@booking.StartTime.ToString("HH:mm") - @booking.EndTime.ToString("HH:mm")</td>
                                        <td>@booking.Status</td>
                                        <td>@booking.Service?.ArtistName</td>
                                        <td>@booking.Service?.ServiceName</td>
                                        <td>@booking.TotalPrice.ToString("C")</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                    else
                    {
                        <div class="alert alert-info">Bạn chưa có lịch hẹn nào.</div>
                    }
                </div>

                <!-- Artist Bookings Section -->
                <div id="artist-bookings-section" class="d-none mt-4">
                    @if (ViewBag.ArtistBookings != null && ((PaginatedList<BookingDTO>)ViewBag.ArtistBookings).Items.Any())
                    {
                        var bookings = (PaginatedList<BookingDTO>)ViewBag.ArtistBookings;
                        <table class="table table-bordered table-striped">
                            <thead>
                                <tr>
                                    <th>Ngày đặt</th>
                                    <th>Khách hàng</th>
                                    <th>Thời gian</th>
                                    <th>Dịch vụ</th>
                                    <th>Trạng thái</th>
                                    <th>Tổng tiền</th>
                                    <th>Thao tác</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var booking in bookings.Items)
                                {
                                    <tr data-id="@booking.Id">
                                        <td>@booking.BookingDate.ToString("dd/MM/yyyy")</td>
                                        <td>@booking.Customer.Email</td>
                                        <td>@booking.StartTime.ToString("HH:mm") - @booking.EndTime.ToString("HH:mm")</td>
                                        <td>@booking.Service?.ServiceName</td>
                                        <td class="booking-status">@booking.Status</td>
                                        <td>@booking.TotalPrice.ToString("C")</td>
                                        @{
                                            var statusEnum = Enum.TryParse<BookingStatus>(booking.Status, out var parsedStatus) ? parsedStatus : (BookingStatus?)null;
                                        }
                                        <td>
                                            @if (statusEnum == BookingStatus.Pending)
                                            {
                                                <button class="btn btn-sm btn-success confirm-btn">Xác nhận</button>
                                                <button class="btn btn-sm btn-danger cancel-btn">Hủy</button>
                                            }
                                            else if (statusEnum == BookingStatus.Confirmed)
                                            {
                                                <button class="btn btn-sm btn-secondary complete-btn">Hoàn thành</button>
                                            }
                                        </td>

                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                    else
                    {
                        <div class="alert alert-info">Chưa có khách đặt lịch hẹn.</div>
                    }
                </div>


                <!-- Services Section for Artist -->
                <div id="services-section" class="d-none mt-4">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <h5 class="mb-0">Danh sách dịch vụ</h5>
                        <button type="button" class="btn btn-light-pink" data-bs-toggle="modal" data-bs-target="#createServiceModal">
                            <i class="bi bi-plus-circle"></i> Tạo dịch vụ mới
                        </button>
                    </div>

                    @if (ViewBag.Services != null && ((PaginatedList<ResponseServiceDTO>)ViewBag.Services).Items.Any())
                    {
                        var services = (PaginatedList<ResponseServiceDTO>)ViewBag.Services;
                        <table class="table table-bordered table-striped">
                            <thead class="table-light">
                                <tr>
                                    <th>Tên dịch vụ</th>
                                    <th>Giá</th>
                                    <th>Thời lượng</th>
                                    <th>Trạng thái</th>
                                    <th>Mô tả</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var service in services.Items)
                                {
                                    <tr>
                                        <td>@service.ServiceName</td>
                                        <td>@service.Price.ToString("C")</td>
                                        <td>@service.Duration</td>
                                        <td>@service.Status</td>
                                        <td>@service.ServiceDescription</td>
                                        <td>
                                            <button type="button" class="btn btn-sm btn-outline-primary edit-service-btn"
                                                    data-id="@service.Id"
                                                    data-name="@service.ServiceName"
                                                    data-description="@service.ServiceDescription"
                                                    data-duration="@service.Duration"
                                                    data-price="@service.Price"
                                                    data-status="@((int)service.Status)"
                                                    data-typeid="@service.ServiceTypeID"
                                                    data-bs-toggle="modal"
                                                    data-bs-target="#createServiceModal">
                                                <i class="bi bi-pencil-square"></i> Sửa
                                            </button>
                                        </td>
                                    </tr>
                                }

                            </tbody>
                        </table>
                        @if (services.TotalPages > 1)
                        {
                            <nav>
                                <ul class="pagination justify-content-center">
                                    @if (services.HasPreviousPage)
                                    {
                                        <li class="page-item">
                                            <a class="page-link" href="?servicePage=@(services.PageNumber - 1)">«</a>
                                        </li>
                                    }

                                    @for (int i = 1; i <= services.TotalPages; i++)
                                    {
                                        <li class="page-item @(i == services.PageNumber ? "active" : "")">
                                            <a class="page-link" href="?servicePage=@i">@i</a>
                                        </li>
                                    }

                                    @if (services.HasNextPage)
                                    {
                                        <li class="page-item">
                                            <a class="page-link" href="?servicePage=@(services.PageNumber + 1)">»</a>
                                        </li>
                                    }
                                </ul>
                            </nav>
                        }

                    }
                    else
                    {
                        <div class="alert alert-info">Bạn chưa có dịch vụ nào.</div>
                    }
                </div>

            </div>
        </div>
    </div>
</form>

<!-- Modal: Create New Service -->
<div class="modal fade" id="createServiceModal" tabindex="-1" aria-labelledby="createServiceModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form id="createServiceForm">
                <input type="hidden" id="ServiceId" name="id" />
                <div class="modal-header">
                    <h5 class="modal-title" id="createServiceModalLabel">Tạo dịch vụ mới</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Đóng"></button>
                </div>
                <div class="modal-body row g-3">
                    <div class="col-12">
                        <label for="ServiceName" class="form-label">Tên dịch vụ</label>
                        <input type="text" class="form-control" id="ServiceName" name="serviceName" required />
                    </div>
                    <div class="col-12">
                        <label for="Description" class="form-label">Mô tả</label>
                        <textarea class="form-control" id="Description" name="description" rows="3" required></textarea>
                    </div>
                    <div class="col-md-6">
                        <label for="Duration" class="form-label">Thời lượng (phút)</label>
                        <input type="number" class="form-control" id="Duration" name="duration" min="1" max="1440" required />
                    </div>
                    <div class="col-md-6">
                        <label for="Price" class="form-label">Giá</label>
                        <input type="number" class="form-control" id="Price" name="price" required min="0" />
                    </div>
                    <div class="col-md-6">
                        <label for="Status" class="form-label">Trạng thái</label>
                        <select class="form-select" id="Status" name="status" required>
                            <option value="0">Hoạt động</option>
                            <option value="1">Không hoạt động</option>
                        </select>
                    </div>
                    <div class="col-md-6">
                        <label for="ServiceTypeID" class="form-label">Loại dịch vụ</label>
                        <select class="form-select" id="ServiceTypeID" name="serviceTypeID" required>
                            <option value="">-- Chọn loại dịch vụ --</option>
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                    <button type="submit" class="btn btn-pink">Tạo</button>
                </div>
            </form>
        </div>
    </div>
</div>



@section Scripts {
    <script>
        let editMode = false;

        document.getElementById('toggleEdit').addEventListener('click', function () {
            editMode = !editMode;

            document.querySelectorAll('.view-mode').forEach(el => el.classList.toggle('d-none'));
            document.querySelectorAll('.edit-mode').forEach(el => el.classList.toggle('d-none'));
            this.textContent = editMode ? 'Lưu thông tin' : 'Thay thông tin';

            if (!editMode) {
                document.getElementById('profileForm').submit();
            }
        });

        // Toggle tabs
        document.querySelectorAll('#profileTabs .nav-link').forEach(tab => {
            tab.addEventListener('click', function (e) {
                e.preventDefault();
                const selected = this.getAttribute('data-tab');
                localStorage.setItem('activeProfileTab', selected);
                switchTab(selected);
            });
        });

                function switchTab(tab) {
            document.querySelectorAll('#profileTabs .nav-link').forEach(t => {
                t.classList.remove('active');
                if (t.getAttribute('data-tab') === tab) {
                    t.classList.add('active');
                }
            });

            document.getElementById('info-section')?.classList.add('d-none');
            document.getElementById('customer-bookings-section')?.classList.add('d-none');
            document.getElementById('artist-bookings-section')?.classList.add('d-none');
            document.getElementById('services-section')?.classList.add('d-none');

            if (tab === 'info') document.getElementById('info-section')?.classList.remove('d-none');
            if (tab === 'customer-bookings') document.getElementById('customer-bookings-section')?.classList.remove('d-none');
            if (tab === 'artist-bookings') document.getElementById('artist-bookings-section')?.classList.remove('d-none');
            if (tab === 'services') document.getElementById('services-section')?.classList.remove('d-none');
        }

        document.addEventListener('DOMContentLoaded', function () {
            const savedTab = localStorage.getItem('activeProfileTab') || 'info';
            switchTab(savedTab);
        });


        // Edit service
        document.querySelectorAll('.edit-service-btn').forEach(button => {
            button.addEventListener('click', function () {
                document.getElementById('ServiceId').value = this.dataset.id;
                document.getElementById('ServiceName').value = this.dataset.name;
                document.getElementById('Description').value = this.dataset.description;

                const timeParts = this.dataset.duration.split(':');
                const durationMinutes = parseInt(timeParts[0]) * 60 + parseInt(timeParts[1]);
                document.getElementById('Duration').value = durationMinutes;

                document.getElementById('Price').value = this.dataset.price;
                document.getElementById('Status').value = this.dataset.status;
                document.getElementById('ServiceTypeID').value = this.dataset.typeid;

                document.getElementById('createServiceModalLabel').textContent = 'Chỉnh sửa dịch vụ';
                document.querySelector('#createServiceForm button[type="submit"]').textContent = 'Cập nhật';
            });
        });

        // Create new service
        document.querySelector('[data-bs-target="#createServiceModal"]').addEventListener('click', function () {
            document.getElementById('ServiceId').value = '';
            document.getElementById('ServiceName').value = '';
            document.getElementById('Description').value = '';
            document.getElementById('Duration').value = '';
            document.getElementById('Price').value = '';
            document.getElementById('Status').value = '0';
            document.getElementById('ServiceTypeID').value = '';

            document.getElementById('createServiceModalLabel').textContent = 'Tạo dịch vụ mới';
            document.querySelector('#createServiceForm button[type="submit"]').textContent = 'Tạo';
        });

        // Submit service form
        document.getElementById('createServiceForm').addEventListener('submit', async function (e) {
            e.preventDefault();

            const token = document.cookie.split('; ').find(row => row.startsWith('TokenString='))?.split('=')[1];
            if (!token) {
                alert('Bạn cần đăng nhập lại.');
                return;
            }

            const baseUrl = window.appConfig.apiBaseUrl;
            const id = document.getElementById('ServiceId').value;
            const data = {
                id: id || null,
                serviceName: document.getElementById('ServiceName').value,
                description: document.getElementById('Description').value,
                durationInMinutes: parseInt(document.getElementById('Duration').value),
                price: parseFloat(document.getElementById('Price').value),
                status: parseInt(document.getElementById('Status').value),
                serviceTypeID: document.getElementById('ServiceTypeID').value
            };

            const url = id
                ? `${baseUrl}/Service/by-artist/${id}`
                : `${baseUrl}/Service/by-artist`;
            const method = id ? 'PUT' : 'POST';

            try {
                const response = await fetch(url, {
                    method: method,
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': 'Bearer ' + token
                    },
                    body: JSON.stringify(data)
                });

                if (!response.ok) {
                    const err = await response.text();
                    alert(`${id ? 'Cập nhật' : 'Tạo'} dịch vụ thất bại: ` + err);
                    return;
                }

                alert(`${id ? 'Cập nhật' : 'Tạo'} dịch vụ thành công!`);
                location.reload();
            } catch (error) {
                console.error(error);
                alert('Lỗi khi gửi yêu cầu.');
            }
        });
    </script>

    <script>
        document.addEventListener('DOMContentLoaded', async function () {
            const token = document.cookie.split('; ').find(row => row.startsWith('TokenString='))?.split('=')[1];
            if (!token) return;

            const baseUrl = window.appConfig.apiBaseUrl;

            try {
                const response = await fetch(`${baseUrl}/ServiceType`, {
                    headers: {
                        'Authorization': 'Bearer ' + token
                    }
                });

                if (response.ok) {
                    const serviceTypes = await response.json();
                    const select = document.getElementById('ServiceTypeID');

                    serviceTypes.forEach(type => {
                        const option = document.createElement('option');
                        option.value = type.id;
                        option.textContent = type.name;
                        select.appendChild(option);
                    });
                } else {
                    console.warn('Không thể tải danh sách loại dịch vụ');
                }
            } catch (error) {
                console.error('Lỗi khi tải loại dịch vụ:', error);
            }
        });
    </script>

    <script>
        const avatarInput = document.getElementById('avatarInput');
        const avatarPreview = document.getElementById('avatarPreview');
        const changeAvatarBtn = document.getElementById('changeAvatarBtn');

        changeAvatarBtn.addEventListener('click', () => {
            avatarInput.click(); // Trigger file input
        });

        avatarInput.addEventListener('change', async function () {
            const file = this.files[0];
            if (!file) return;

            // Preview instantly
            const reader = new FileReader();
            reader.onload = () => {
                avatarPreview.src = reader.result;
            };
            reader.readAsDataURL(file);

            const token = document.cookie
                .split('; ')
                .find(row => row.startsWith('TokenString='))
                ?.split('=')[1];

            if (!token) {
                alert("Vui lòng đăng nhập lại.");
                return;
            }

            const formData = new FormData();
            formData.append("file", file);

            try {
                const response = await fetch(`${window.appConfig.apiBaseUrl}/auth/avatar`, {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${token}`
                    },
                    body: formData
                });

                if (!response.ok) {
                    const err = await response.text();
                    alert("Lỗi khi tải ảnh: " + err);
                    return;
                }

                const result = await response.json();
                avatarPreview.src = result.url; // Update to new avatar URL if needed

                alert("Ảnh đại diện đã được cập nhật!");

            } catch (err) {
                console.error("Upload failed", err);
                alert("Lỗi khi tải ảnh.");
            }
        });
    </script>

    
    <script>
        const apiBaseUrl = '@ViewBag.ApiBaseUrl' || '@(new Uri(Context.Request.Scheme + "://" + Context.Request.Host).ToString())/api';

        document.addEventListener("DOMContentLoaded", () => {
            function updateBookingStatus(bookingId, newStatus, row) {
                fetch(`${apiBaseUrl}/booking/${bookingId}/confirm?status=${newStatus}`, {
                    method: "PUT",
                    headers: {
                        "Authorization": `Bearer ${getCookie("TokenString")}`
                    }
                })
                .then(response => {
                    if (!response.ok) throw new Error("Không thể cập nhật trạng thái.");
                    return response.json();
                })
                .then(data => {
                    row.querySelector(".booking-status").innerText = newStatus;
                    alert("Cập nhật thành công!");
                    location.reload(); // Optionally refresh to reflect changes
                })
                .catch(error => {
                    alert("Lỗi: " + error.message);
                });
            }

            function getCookie(name) {
                const match = document.cookie.match(new RegExp('(^| )' + name + '=([^;]+)'));
                return match ? match[2] : null;
            }

            document.querySelectorAll(".confirm-btn").forEach(btn => {
                btn.addEventListener("click", function () {
                    const row = this.closest("tr");
                    const bookingId = row.dataset.id;
                    updateBookingStatus(bookingId, "Confirmed", row);
                });
            });

            document.querySelectorAll(".cancel-btn").forEach(btn => {
                btn.addEventListener("click", function () {
                    const row = this.closest("tr");
                    const bookingId = row.dataset.id;
                    updateBookingStatus(bookingId, "Canceled", row);
                });
            });

            document.querySelectorAll(".complete-btn").forEach(btn => {
                btn.addEventListener("click", function () {
                    const row = this.closest("tr");
                    const bookingId = row.dataset.id;
                    updateBookingStatus(bookingId, "Completed", row);
                });
            });
        });
    </script>


}

